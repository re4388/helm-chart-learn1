name: Pull Request Check

on:
  pull_request:
    branches: [main, master]

env:
  JAVA_VERSION: "17"

jobs:
  pr-check:
    name: PR Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        working-directory: ./application
        run: mvn clean test

      - name: Check code formatting
        working-directory: ./application
        run: |
          mvn spotless:check || echo "Code formatting issues found. Run 'mvn spotless:apply' to fix."
        continue-on-error: true

      - name: Security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        if: always()
        with:
          sarif-file: "application/target/spotbugs.sarif"
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 PR Check Results')
            );

            const body = `🔍 PR Check Results

            ✅ Tests completed
            📊 Check the Actions tab for detailed results
            🐳 Docker build will run after merge to main branch

            _This comment is automatically updated on each push._`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
