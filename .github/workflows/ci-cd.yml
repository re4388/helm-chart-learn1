name: CI/CD 管道

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

# 新增權限設定
permissions:
  contents: write     # 需要寫入權限來推送映像標籤更新
  actions: read
  checks: write
  pull-requests: write

env:
  DOCKER_IMAGE_NAME: re4388/demo-app
  JAVA_VERSION: "17"

jobs:
  # 持續整合 - 執行測試
  ci:
    name: 持續整合
    runs-on: ubuntu-latest

    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 設定 JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: 快取 Maven 相依性
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 執行測試
        working-directory: ./application
        run: mvn clean test

      - name: 上傳測試結果
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            application/target/surefire-reports/
            application/target/site/jacoco/

  # 持續部署 - 建置並推送 Docker 映像檔
  cd:
    name: 持續部署
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4

      - name: 設定 JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: 快取 Maven 相依性
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 建置應用程式
        working-directory: ./application
        run: mvn clean package -DskipTests

      - name: 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登入 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: 提取中繼資料
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 建置並推送 Docker 映像檔
        uses: docker/build-push-action@v5
        with:
          context: ./application
          file: ./application/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 更新 Docker Hub 描述
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}
          repository: ${{ env.DOCKER_IMAGE_NAME }}
          readme-filepath: ./application/README.md

      - name: 更新 ArgoCD 映像標籤
        run: |
          # 取得短版本的 commit hash
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          NEW_TAG="main-${SHORT_SHA}"
          
          echo "更新映像標籤為: $NEW_TAG"
          echo "當前 commit SHA: ${{ github.sha }}"
          echo "短版本 SHA: $SHORT_SHA"
          
          # 更新 ArgoCD 應用程式配置 - 使用更精確的正則表達式
          sed -i "s/value: \"main-[a-f0-9]\{7\}\"/value: \"$NEW_TAG\"/" k8s/argocd/argocd-application.yaml
          
          # 更新 Helm values 檔案 - 使用更精確的正則表達式
          sed -i "s/tag: \"main-[a-f0-9]\{7\}\"/tag: \"$NEW_TAG\"/" k8s/helm-chart/demo-app/values.yaml
          
          # 更新生產環境 values 檔案
          if [ -f k8s/helm-chart/demo-app/values-production.yaml ]; then
            sed -i "s/tag: \"main-[a-f0-9]\{7\}\"/tag: \"$NEW_TAG\"/" k8s/helm-chart/demo-app/values-production.yaml
          fi
          
          # 驗證更新結果
          echo "=== ArgoCD 配置更新結果 ==="
          grep -n "image.tag" k8s/argocd/argocd-application.yaml
          echo "=== Helm values 更新結果 ==="
          grep -n "tag:" k8s/helm-chart/demo-app/values.yaml

      - name: 提交並推送映像標籤更新
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/argocd/argocd-application.yaml k8s/helm-chart/demo-app/values.yaml k8s/helm-chart/demo-app/values-production.yaml
          git commit -m "chore: update image tag to main-$(echo ${{ github.sha }} | cut -c1-7)" || exit 0
          git push