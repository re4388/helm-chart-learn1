1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "demo-app.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "demo-app.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "demo-app.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "demo-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check application health:
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "demo-app.fullname" . }} 8080:{{ .Values.service.port }}
  curl http://localhost:8080/actuator/health

3. Access MongoDB:
{{- if .Values.mongodb.enabled }}
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "demo-app.fullname" . }}-mongodb 27017:27017
  # Connection string: mongodb://{{ .Values.mongodb.auth.username }}:{{ .Values.mongodb.auth.password }}@localhost:27017/{{ .Values.mongodb.auth.database }}
{{- end }}

4. Access MinIO Console:
{{- if .Values.minio.enabled }}
  kubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include "demo-app.fullname" . }}-minio 9001:9001
  # MinIO Console: http://localhost:9001
  # Username: {{ .Values.minio.auth.rootUser }}
  # Password: {{ .Values.minio.auth.rootPassword }}
{{- end }}

5. Test the application:
  # Create a post
  curl -X POST http://localhost:8080/api/posts \
    -H "Content-Type: application/json" \
    -d '{"id":"welcome","title":"Welcome to Kubernetes","content":"Deployed with ArgoCD and Helm!"}'
  
  # Upload a file
  curl -X POST \
    -F "file=@test.txt" \
    -F "bucket=demo-bucket" \
    -F "uploadedBy=kubernetes" \
    http://localhost:8080/api/files/upload